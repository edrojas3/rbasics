"
setwd("Documents/rfiles/rbasics")
setwd(..)
setwd("..")
setwd(".")
getwd()
list.files()
list.files(pattern="md")
list.files(pattern="R")
list.files(pattern="read")
?list.files
list.files(pattern="read", ignore.case=T)
list.files(pattern="read", ignore.case=T, full.names = T)
list.dir()
list.dirs()
list.dirs(pattern = "csv")
list.dir(pattern = "csv")
list.files()
list.files(pattern="*.md")
list.files(pattern="*.md$")
list.files(pattern="\\.md$")
list.files(pattern="\\Rea")
list.files(pattern="Rea\\")
list.files(pattern="Rea?")
list.files(pattern="Rea$")
list.files(pattern="\\Rea$")
list.files(pattern="\\REA")
df
df[1,] = c()
df[1,] = NULL
df[,1] = NULL
df[c("1","10")]
df[c("1","10"),]
df[-c("1","10"),]
df[-c(1,10),]
df
df = df[-c(1,10),]
df
df = df[-c(1,10),]
df
for (ii in 1:nrow(df)){
df[ii, "Length"] == 0
}
df[ii, "Length"] == 0
for (ii in 1:nrow(df)){
print(df[ii, "Length"] == 0)
}
for (ii in 1:nrow(df)){
if(df[ii, "Length"] == 0){
print("t")
}
}
for (ii in 1:nrow(df)){
if(df[ii, "Length"] == 0){
print("t")
}else{
print("f")
}
}
idx=c()
for (ii in 1:nrow(df)){
if(df[ii, "Length"] == 0){
idx = c(idx, ii)
}
}
idx
df[idx,"Length"]
df[25,"Length"]
df[-idx,]
idx=c()
for (ii in 1:nrow(df)){
if(df[ii, "Length"] == 0){
idx = c(idx, ii)
}
}
df = df[-idx,]
df
getwd()
# recuerda que ese sólo es una ruta ejemplo. La tienes que cambiar por la ruta en la que están tus archivos
setwd("/home/eduardo/Documents/rfiles/rbasics/csv_files")
list.files()
df = read.csv("Cells-Tango1IR.csv")
head(df)
start_for = Sys.time()
idx=c()
for (ii in 1:nrow(df)){
if(df[ii, "Length"] == 0){
idx = c(idx, ii)
}
}
df_for = df[-idx,]
end_for = Sys.time()
end_for - start_for
start_bool = Sys.time()
df_bool = df[,df$Length>0]
df
df$Length
df$Length>0
start_bool = Sys.time()
df_bool = df[df$Length>0,]
end_bool = Sys.time()
end_bool - start_bool
start_bool
class(start_bool)
start_for = Sys.time()
idx=c()
for (ii in 1:nrow(df)){
if(df[ii, "Length"] == 0){
idx = c(idx, ii)
}
}
df_for = df[-idx,]
end_for = Sys.time()
end_for - start_for
start_for = Sys.time()
idx=c()
for (ii in 1:nrow(df)){
if(df[ii, "Length"] == 0){
idx = c(idx, ii)
}
}
df_for = df[-idx,]
end_for = Sys.time()
end_for - start_for
start_for = Sys.time()
idx=c()
for (ii in 1:nrow(df)){
if(df[ii, "Length"] == 0){
idx = c(idx, ii)
}
}
df_for = df[-idx,]
end_for = Sys.time()
end_for - start_for
start_for = Sys.time()
idx=c()
for (ii in 1:nrow(df)){
if(df[ii, "Length"] == 0){
idx = c(idx, ii)
}
}
df_for = df[-idx,]
end_for = Sys.time()
end_for - start_for
start_for = Sys.time()
idx=c()
for (ii in 1:nrow(df)){
if(df[ii, "Length"] == 0){
idx = c(idx, ii)
}
}
df_for = df[-idx,]
end_for = Sys.time()
end_for - start_for
start_for = Sys.time()
idx=c()
for (ii in 1:nrow(df)){
if(df[ii, "Length"] == 0){
idx = c(idx, ii)
}
}
df_for = df[-idx,]
end_for = Sys.time()
end_for - start_for
start_bool = Sys.time()
df_bool = df[df$Length>0,]
end_bool = Sys.time()
end_bool - start_bool
start_bool = Sys.time()
df_bool = df[df$Length>0,]
end_bool = Sys.time()
end_bool - start_bool
start_bool = Sys.time()
df_bool = df[df$Length>0,]
end_bool = Sys.time()
end_bool - start_bool
start_bool = Sys.time()
df_bool = df[df$Length>0,]
end_bool = Sys.time()
end_bool - start_bool
start_bool = Sys.time()
df_bool = df[df$Length>0,]
end_bool = Sys.time()
end_bool - start_bool
start_bool = Sys.time()
df_bool = df[df$Length>0,]
end_bool = Sys.time()
end_bool - start_bool
start_bool = Sys.time()
df_bool = df[df$Length>0,]
end_bool = Sys.time()
end_bool - start_bool
start_bool = Sys.time()
df_bool = df[df$Length>0,]
end_bool = Sys.time()
end_bool - start_bool
start_bool = Sys.time()
df_bool = df[df$Length>0,]
end_bool = Sys.time()
end_bool - start_bool
df
colnames(df)
rownames(df)
df$Area
df["1",]
strsplit(file, sep=".")
file = "archivo.csv"
strsplit(file, sep=".")
file = "archivo.csv"
nchar(file)
strsplit(file, 1, 3 )
?strsplit
tools::file_path_sans_ext("ABCD.csv")
getwd()
list.files()
?list.files()
list.files(pattern = "html")
for (ii in 1:10) {print(ii)}
for (ii in 1:10) {
print(ii + 1)
}
vector = c("q", "w", "e", "r", "t", "y")
for (ii in vector) {
print(ii)
}
vector = c("qwerty", "w", "e", "r", "t", "y")
for (ii in vector) {
print(ii)
}
c = 1
while (df$Length[c,] == 0)
{
print("length es 0")
}
c = 1
while (df$Length[c] == 0)
{
print("length es 0")
c = c+1
}
df
#start_for = Sys.time()
idx=c()
idx
df
df$X = NULL
df
df["1",] = NULL
df[1,] = NULL
df[-1,]
df[-c(1:10),]
#start_for = Sys.time()
idx=c()
for (ii in 1:nrow(df)){
if(df[ii, "Length"] == 0){
idx = c(idx, ii)
}
}
df_for = df[-idx,]
# end_for = Sys.time()
#
# end_for - start_for
df_for
df$Length>0
df_bool = df[df$Length>0,]
start_for = Sys.time()
idx=c()
for (ii in 1:nrow(df)){
if(df[ii, "Length"] == 0){
idx = c(idx, ii)
}
}
df_for = df[-idx,]
end_for = Sys.time()
end_for - start_for
start_bool = Sys.time()
df_bool = df[df$Length>0,]
end_bool = Sys.time()
end_bool - start_bool
?read.csv
library(tools)
library(tools)
ls()
ls
ls()
library(tools)
getwd()
# recuerda que ese sólo es una ruta ejemplo. La tienes que cambiar por la ruta en la que están tus archivos
setwd("/home/eduardo/Documents/rfiles/rbasics/csv_files")
list.files()
df = read.csv("Cells-Tango1IR.csv")
head(df)
# Obtener la información de una variable "string" que tenga el nombre del archivo.
nombre_archivo = "Cells-Tango1IR.csv"
nombre_split = unlist(strsplit(nombre_archivo, "-"))
# repetir el string tantas veces cómo número de filas tenga df
tipo_membrana = rep(nombre_split[1], times=nrow(df))
muestra = rep(nombre_split[2], times=nrow(df))
# añadir columnas al df
df$tipo_membrana = tipo_membrana
df$muestra = muestra
colnames(df)
df = df[df$Length > 0,]
head(df)
setwd("/home/eduardo/Documents/rfiles/rbasics/csv_files")
# variable con la lista de archivos
archivos = list.files()
# for loop que comienza desde el segundo archivo
for (ii in 2:length(archivos)) {
# 1. abre archivo y lo guarda en df_x
df_x = read.csv(archivos[ii])
# 2. obtiene info faltante y la añade
nombre_archivo = archivos[ii]
nombre_split = unlist(strsplit(nombre_archivo, "-"))
tipo_membrana = rep(nombre_split[1], times=nrow(df_x))
muestra = rep(nombre_split[2], times=nrow(df_x))
df_x$tipo_membrana = tipo_membrana
df_x$muestra = muestra
# 3. elimina filas que sobran
df_x = df_x[df_x$Length > 0,]
# 4. junta los data frames en uno solo
df = rbind(df, df_x)
}
dim(df)
df
head(df)
mutate(df, Time = Slice*2.5)
library(dplyr)
?mutate
mutate(df, Time = Slice*2.5)
df_mutate = mutate(df, Time = Slice*2.5)
head(df_mutate)
df$Time = df$Slice*2.5
head(df)
df$Slice
library(ggplot2)
ggplot()
?ggplot
ggplot(df, aes(x = Length, y = Time)) +
geom_dotplot()
ggplot(df, aes(x = Length, y = Time)) +
geom_point()
ggplot(df, aes(x = Length, y = Time)) +
geom_point() +
geom_line()
colnames(df)
unique(df$tipo_membrana)
ggplot(df, aes(x = Length, y = Time, color = tipo_membrana)) +
geom_point() +
geom_line()
ggplot(df, aes(y = Length, x = Time, color = tipo_membrana)) +
geom_point() +
geom_line()
df$tipo_membrana
df[,c("tipo_membrana", "muestra")]
df[,c("tipo_membrana", "muestra")]
df[,c("tipo_membrana", "muestra")]
df$muestra
match("Tango1IR.csv", df$muestra)
df[, df$tipo_membrana == "Cells"]
df$tipo_membrana == "Cells"
df[df$tipo_membrana == "Cells",]
df_cells = df[df$tipo_membrana == "Cells", ]
df_tube = df[df$tipo_membrana == "Tube", ]
x = 1
x
x
x == 1
x == 2
df$tipo_membrana == "Cells"
df_cells = df[df$tipo_membrana == "Cells"]
df_cells = df[df$tipo_membrana == "Cells",]
df_cells = df[df$tipo_membrana == "Cells", "Length"]
df_cells
df_cells = df[df$tipo_membrana == "Cells", c("Length", "Time")]
df_cells
df_cells = df[df$tipo_membrana == "Cells", ]
df_tube = df[df$tipo_membrana == "Tube", ]
ggplot(df_cells, aes(y = Length, x = Time, color = muestra)) +
geom_point() +
geom_line() +
ggplot(df_cells, aes(y = Length, x = Time, color = muestra)) +
geom_point() +
geom_line()
ggplot(df_cells, aes(y = Length, x = Time, color = muestra)) +
geom_point() +
geom_line() +
labs(title = "Cells")
ggplot(df_cells, aes(y = Length, x = Time, color = muestra)) +
geom_point() +
geom_line() +
labs(title = "Tipo de membrana: basal")
ggplot(df_tube, aes(y = Length, x = Time, color = muestra)) +
geom_point() +
geom_line() +
labs(title = "Tipo de membrana: tube")
ggplot(df, aes(y = Length, x = Time, color = tipo_membrana)) +
geom_point() +
geom_line() +
facet_wrap(nrow=1, ~muestra) +
labs(title = "Tipo de membrana: basal")
ggplot(df, aes(y = Length, x = Time, color = tipo_membrana)) +
geom_point() +
geom_line() +
facet_wrap(nrow=2, ~ muestra) +
labs(title = "Tipo de membrana: basal")
ggplot(df, aes(y = Length, x = Time, color = tipo_membrana)) +
geom_point() +
geom_line() +
facet_wrap(ncol=2, ~ muestra) +
labs(title = "Tipo de membrana: basal")
row.names(df)
rownames(df)
new_row_names = paste(df$Slice, rownames(df), sep="_" )
new_row_names
new_row_names = paste(rep("slice", times=nrow(df)), rownames(df), sep="_" )
new_row_names
new_row_names = paste(rep("slice", times=nrow(df)), rownames(df), sep="_" )
rownames(df) = new_row_names
df
rownames(df) = 1:nrow(df)
rownames(df)
rownames(df)[1:3] = c("fila1", "fila2", "fila3")
rownames(df)
# cambia todas las filas
rownames(df) = 1:nrow # regresar a valores originals
# cambia todas las filas
rownames(df) = 1:nrow(df) # regresar a valores originals
new_names = paste("fila", 1:nrow(df))
new_names
new_names = paste("fila", 1:nrow(df), sep="")
new_names
# cambia sólo las primeras tres filas
rownames(df)[1:3] = c("fila1", "fila2", "fila3")
# cambia todas las filas
rownames(df) = 1:nrow(df) # regresar a valores originals
new_names = paste("fila", 1:nrow(df), sep="") # crear un vector con los nuevos nombres
rownames(df) = new_names # cambiar nombre
df
# cambia todas las filas
rownames(df) = 1:nrow(df) # regresar a valores originals
df
# Método 1
unlist(strsplit(files, sep="."))[1]
# Método 1
strsplit(files, sep=".")
# Método 1
strsplit(file, sep=".")
?strsplit
# Método 1
strsplit(file, ".")
file
# Método 1
strsplit(file, ".")
# Método 1
file_split = strsplit(file, ".")
file_split
file_split = strsplit(file, "\\.")
file_spllit
file_split
# Método 1
file_split = unlist(strsplit(file, "\\."))
file_split
# Método 1
file_split = unlist(strsplit(file, "\\."))[1]
file_split
# Método 2
file_substr = substr(file_split, 1, nchar(file)-4)
file_substr
rownames(mtcars)
df = mtcars # copia mtcars en una nueva variable
# cambia sólo las primeras tres filas
rownames(df)[1:3] = c("fila1", "fila2", "fila3")
# cambia todas las filas
rownames(df) = rownames(mtcars)[1:3] # regresar a valores originals
df = mtcars # copia mtcars en una nueva variable
# cambia sólo las primeras tres filas
rownames(df)[1:3] = c("fila1", "fila2", "fila3")
# cambia todas las filas
rownames(df) = rownames(mtcars)[1:3] # regresar a valores originals
# cambia todas las filas
rownames(df)[1:3] = rownames(mtcars)[1:3] # regresar a valores originals
new_names = paste("fila", 1:nrow(df), sep="") # crear un vector con los nuevos nombres
rownames(df) = new_names # cambiar nombre
# añade la nueva variable al dataframe
mtcars_mutated = mutate(mtcars, hp2 = hp *2)
# sólo se queda con la(s) nueva(s) variable(s)
mtcars_transmuted = transmute(mtcars, hp2 = hp*2)
data()
*R-base*
* Recuerda que con *[]* indicas indexación de un array.
* Un data frame es un array de 2 dimensiones: filas y columnas
* `df[filas, colu]
```{r}
mtcars[, c("cyl", "hp")]
```
*dplyr*
```{r}
select(mtcars, cyl, hp)
```
?select
select(mtcars, columnas)
columnas
select(mtcars, cyl, hp)
mtcars[mtcars$cyl == 8 & cyl == 360,]
mtcars[mtcars$cyl == 8 & disp == 360,]
start_for
list.files(pattern = "md")
list.files(pattern = "\\md")
list.files(pattern = "\\.md")
?Sys.time
Sys.time()
